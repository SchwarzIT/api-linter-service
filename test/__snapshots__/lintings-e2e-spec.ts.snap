// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Feature] Lintings - /api-linting/api/v1/lintings POST successfully creates a new linting: lintingResultSwaggerFile 1`] = `
Object {
  "description": "Given API Spec DOES comply with company API rules.",
  "highestSeverityLevel": "Warn",
  "isValidSpec": true,
  "linkApiRules": "https://onedirection.schwarz/architecture-best-practices/apis/",
  "lintingResults": Array [
    Object {
      "code": "http-verbs-should-be-used",
      "message": "HTTP verbs should be used to express different actions or functions on a resource; The HTTP verb /digital-twin/api/v1/products.put is missing.",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products",
      ],
      "range": Object {
        "end": Object {
          "character": 1243,
          "line": 0,
        },
        "start": Object {
          "character": 60,
          "line": 0,
        },
      },
      "severity": 2,
    },
    Object {
      "code": "http-verbs-should-be-used",
      "message": "HTTP verbs should be used to express different actions or functions on a resource; The HTTP verb /digital-twin/api/v1/products.patch is missing.",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products",
      ],
      "range": Object {
        "end": Object {
          "character": 1243,
          "line": 0,
        },
        "start": Object {
          "character": 60,
          "line": 0,
        },
      },
      "severity": 2,
    },
    Object {
      "code": "http-verbs-should-be-used",
      "message": "HTTP verbs should be used to express different actions or functions on a resource; The HTTP verb /digital-twin/api/v1/products.delete is missing.",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products",
      ],
      "range": Object {
        "end": Object {
          "character": 1243,
          "line": 0,
        },
        "start": Object {
          "character": 60,
          "line": 0,
        },
      },
      "severity": 2,
    },
    Object {
      "code": "path-description-is-mandatory",
      "message": "Every route of an API should have a description; property: /digital-twin/api/v1/products.description is missing",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products",
      ],
      "range": Object {
        "end": Object {
          "character": 1243,
          "line": 0,
        },
        "start": Object {
          "character": 60,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "must-define-example-schema",
      "message": "Every DTO must define at least one example; DTO is lacking an example #/paths/~1digital-twin~1api~1v1~1products/post/requestBody/content/application~1json",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products",
        "post",
        "requestBody",
        "content",
        "application/json",
      ],
      "range": Object {
        "end": Object {
          "character": 296,
          "line": 0,
        },
        "start": Object {
          "character": 239,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "must-define-example-schema",
      "message": "Every DTO must define at least one example; DTO is lacking an example #/paths/~1digital-twin~1api~1v1~1products/post/responses/201/content/application~1json",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products",
        "post",
        "responses",
        "201",
        "content",
        "application/json",
      ],
      "range": Object {
        "end": Object {
          "character": 485,
          "line": 0,
        },
        "start": Object {
          "character": 427,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "must-define-example-schema",
      "message": "Every DTO must define at least one example; DTO is lacking an example #/paths/~1digital-twin~1api~1v1~1products/get/responses/200/content/application~1json",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products",
        "get",
        "responses",
        "200",
        "content",
        "application/json",
      ],
      "range": Object {
        "end": Object {
          "character": 1028,
          "line": 0,
        },
        "start": Object {
          "character": 946,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "http-verbs-should-be-used",
      "message": "HTTP verbs should be used to express different actions or functions on a resource; The HTTP verb /digital-twin/api/v1/products/{ean}.post is missing.",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products/{ean}",
      ],
      "range": Object {
        "end": Object {
          "character": 3155,
          "line": 0,
        },
        "start": Object {
          "character": 1286,
          "line": 0,
        },
      },
      "severity": 2,
    },
    Object {
      "code": "http-verbs-should-be-used",
      "message": "HTTP verbs should be used to express different actions or functions on a resource; The HTTP verb /digital-twin/api/v1/products/{ean}.patch is missing.",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products/{ean}",
      ],
      "range": Object {
        "end": Object {
          "character": 3155,
          "line": 0,
        },
        "start": Object {
          "character": 1286,
          "line": 0,
        },
      },
      "severity": 2,
    },
    Object {
      "code": "path-description-is-mandatory",
      "message": "Every route of an API should have a description; property: /digital-twin/api/v1/products/{ean}.description is missing",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products/{ean}",
      ],
      "range": Object {
        "end": Object {
          "character": 3155,
          "line": 0,
        },
        "start": Object {
          "character": 1286,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "must-define-example-schema",
      "message": "Every DTO must define at least one example; DTO is lacking an example #/paths/~1digital-twin~1api~1v1~1products~1{ean}/get/responses/200/content/application~1json",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products/{ean}",
        "get",
        "responses",
        "200",
        "content",
        "application/json",
      ],
      "range": Object {
        "end": Object {
          "character": 1635,
          "line": 0,
        },
        "start": Object {
          "character": 1577,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "must-define-example-schema",
      "message": "Every DTO must define at least one example; DTO is lacking an example #/paths/~1digital-twin~1api~1v1~1products~1{ean}/put/requestBody/content/application~1json",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products/{ean}",
        "put",
        "requestBody",
        "content",
        "application/json",
      ],
      "range": Object {
        "end": Object {
          "character": 2181,
          "line": 0,
        },
        "start": Object {
          "character": 2124,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "must-define-example-schema",
      "message": "Every DTO must define at least one example; DTO is lacking an example #/paths/~1digital-twin~1api~1v1~1products~1{ean}/put/responses/200/content/application~1json",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products/{ean}",
        "put",
        "responses",
        "200",
        "content",
        "application/json",
      ],
      "range": Object {
        "end": Object {
          "character": 2366,
          "line": 0,
        },
        "start": Object {
          "character": 2308,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "must-have-response-body",
      "message": "Every route returning a http status code of 200 or 201 must have a response body defined; property [200].content is missing at path: #/paths/~1digital-twin~1api~1v1~1products~1{ean}/delete/responses/200",
      "path": Array [
        "paths",
        "/digital-twin/api/v1/products/{ean}",
        "delete",
        "responses",
        "200",
      ],
      "range": Object {
        "end": Object {
          "character": 2890,
          "line": 0,
        },
        "start": Object {
          "character": 2851,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "info-description",
      "message": "OpenAPI object info \`description\` must be present and at least 100 chars long.",
      "path": Array [
        "info",
        "description",
      ],
      "range": Object {
        "end": Object {
          "character": 3244,
          "line": 0,
        },
        "start": Object {
          "character": 3210,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "contact-information",
      "message": "Every API must have a contact containing name, email and a url; property contact.name is missing",
      "path": Array [
        "info",
        "contact",
      ],
      "range": Object {
        "end": Object {
          "character": 3273,
          "line": 0,
        },
        "start": Object {
          "character": 3271,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "contact-information",
      "message": "Every API must have a contact containing name, email and a url; property contact.email is missing",
      "path": Array [
        "info",
        "contact",
      ],
      "range": Object {
        "end": Object {
          "character": 3273,
          "line": 0,
        },
        "start": Object {
          "character": 3271,
          "line": 0,
        },
      },
      "severity": 1,
    },
    Object {
      "code": "contact-information",
      "message": "Every API must have a contact containing name, email and a url; property contact.url is missing",
      "path": Array [
        "info",
        "contact",
      ],
      "range": Object {
        "end": Object {
          "character": 3273,
          "line": 0,
        },
        "start": Object {
          "character": 3271,
          "line": 0,
        },
      },
      "severity": 1,
    },
  ],
}
`;
